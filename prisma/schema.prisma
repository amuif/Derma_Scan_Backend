// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  name           String
  profilePicture String?
  scans          Scan[]
  role           UserRole       @default(USER)
  articles       EducationHub[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Scan {
  id           String          @id @default(uuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl     String
  imageQuality String?
  confidence   Float
  risk         RiskLevel
  notes        String?
  timestamp    DateTime        @default(now())
  conditions   ScanCondition[]
  symptoms     ScanSymptom[]
}

model ScanCondition {
  id          String    @id @default(uuid())
  scanId      String
  conditionId String
  scan        Scan      @relation(fields: [scanId], references: [id])
  condition   Condition @relation(fields: [conditionId], references: [id])
  confidence  Float
}

model Condition {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  scans       ScanCondition[]
}

model ScanSymptom {
  id        String  @id @default(uuid())
  scanId    String
  symptomId String
  scan      Scan    @relation(fields: [scanId], references: [id])
  symptom   Symptom @relation(fields: [symptomId], references: [id])
  severity  Int?
}

model Symptom {
  id    String        @id @default(uuid())
  name  String        @unique
  scans ScanSymptom[]
}

enum UserRole {
  USER
  ADMIN
}

model EducationHub {
  id        String            @id @default(uuid())
  title     String
  content   String
  category  EducationCategory
  language  String
  author    User              @relation(fields: [authorId], references: [id])
  authorId  String
  status    Status
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Clinic {
  id          String   @id @default(uuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  specialties String[]
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RiskLevel {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
}

enum Status {
  APPROVED @map("approved")
  PENDING  @map("pending")
}

enum EducationCategory {
  TIPS       @map("tips")
  PREVENTION @map("prevention")
  AWARENESS  @map("awareness")
  TREATMENT  @map("treatment")
}
